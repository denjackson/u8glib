Linux/Ubuntu

== ARM gcc ==

From 
  https://launchpad.net/gcc-arm-embedded/
download and extract 
  Linux installation tarball

== LPC flash utility ==

From
  http://sourceforge.net/projects/lpc21isp/files/
download, extract and compile (make)
  lpc21isp tar file

In the u8g example files, update the Makefile with the path to the 
  ARM gcc	("GCCPATH" in the Makeilfe)
and
  LPC flash utility ("FLASHTOOL"  in the Makeilfe)

== Prepare for target controller ==

Depending on your controller, do one of the following:

1) Target controller is named in this U8glib distribution
    --> Nothing to do. Examples will directly work
2) A member of the same controller family is available in the U8glib distribution
    --> locate the *.ld script in the "common" folder and update the FLASH and RAM values
3) If neither 1) or 2) is true for the target controller, one example subdirectory (e.g.
    lpc1114 can be used as template. Usually you need to update/replace all files
    in the common folder.

== Compile U8g example ==

Inside the folder of one of the examples:
  make upload
will compiler, link and upload the example


== Windows (Min-GW) ==

Download and install mingw and msys (http://www.mingw.org/).

From 
  https://launchpad.net/gcc-arm-embedded/
download and extract 
  Windows installer
Default path:
  /c/Program\ Files\ \(x86\)/GNU\ Tools\ ARM\ Embedded/xxxxxxx/

Windows driver for the USB to UART converter.
For FTDI devices, use the virtual com port (VCP) driver.
Download and install:
	http://www.ftdichip.com/Drivers/VCP.htm

To flash the ARM controller via UART interface (attached to a FTDI USB/UART converter),
download and install the virtual com port (VCP) driver:
	http://www.ftdichip.com/Drivers/VCP.htm

The flash procedure can be done with "flashmagic".
Download and install:
	http://www.flashmagictool.com/

Unzip u8glib for ARM controller into an empty folder (c:\u8g)

cd /c/u8g/lpc1114/hello_world

Update the path to gcc-arm-embedded in Makefile.mingw.

make 

Expect some delay during linking phase. The .hex file is placed in the same directory.
Call flashmagic
- select the correct uC, 
- load the .hex file, 
- enable "Erase blocks used by flashfile" and
- put the uC into programming mode (pull ISP pin low and reset the uC)
before starting the flash procedure.


== Windows (gnu make) ==

From
	http://gnuwin32.sourceforge.net/packages/make.htm
download and execute
	setup 
for "make" ("Complete package, except sources")
The rest of this sections assumes, that make has been installed at the default location.

From 
  https://launchpad.net/gcc-arm-embedded/
download and execute the
  Windows installer
The rest of this sections assumes, that gcc-arm-embedded has been installed at the default location.

To flash the ARM controller via UART interface (attached to a FTDI USB/UART converter),
download and install the virtual com port (VCP) driver:
	http://www.ftdichip.com/Drivers/VCP.htm

The flash procedure can be done with "flashmagic".
Download and install:
	http://www.flashmagictool.com/

Unzip u8glib for ARM controller into an empty folder (c:\u8g).

Start "cmd.exe" 

cd c:\u8g\lpc1114\hello_world\

"c:\Program Files (x86)\GnuWin32\bin\make.exe" -f Makefile.gnuwin32

Expect some delay during linking phase. The .hex file is placed in the same directory.
Call flashmagic
- select the correct uC, 
- load the .hex file, 
- enable "Erase blocks used by flashfile" and
- put the uC into programming mode (pull ISP pin low and reset the uC)
before starting the flash procedure.




